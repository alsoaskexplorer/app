// Import the required middleware for handling async operations in Express
const asyncHandler = require('express-async-handler');

// Import the user model to interact with the database
const userModel = require('../models/user'); 

// Controller method to handle AI generation request
// exports.AiGenResults = asyncHandler(async (req, res) => {
//   // Fetch the user's OpenAI API key from the database using the user ID from the request
//   const user = await userModel.findById(req.user.id);
  
//   // Extract the API key from the user data
//   const apiKey = user ? user.openAiKey : null;

//   // Check if the API key is missing or invalid
//   if (!apiKey) 
//     {
//       return res.status(400).send(`<script>alert('API Key is missing or invalid. Please check your settings.');window.close();</script>`);
//     }

//     req.params.query
//   const query = 'write the best possible answer for the query "enter the query here". This is the question from Google people also ask section. Ensure the text reads naturally and provides value to the reader. make sure the answer to the given question provides the relevant answer in the first sentence. make it easy to read, keep the vocabulary simple and make it look like it's written by a human once you are done with this then move further. Also, ensure that you remove 'commonly used AI terms.' Do not use BADWORDS: Additionally, As an AI, As of my last knowledge, As well as, Beacon, Bombastic, Boost, Buckle up, By the same token, Comparatively, Competitive digital world, Conclusion, Correspondingly, Delve, Demystified, Demystifying, Discover, Dive, Elevate, Embark, Embrace, Enhance, Equally, Ever-evolving, Explore, Finally, First, Firstly, Furthermore, Generated by AI, Get ready, Go deeper, Gone are the days, Hitherto, Identically, In addition, In conclusion, In light of, In the sea of, Digital landscape, It can be a daunting task, Important, Crucial, Essential, Journey, Lastly, Leverage, Likewise, Look no further, Maximise, Moreover, Navigating, Nested, Not to mention, Now let’s move on, Overall, Picture this, Plethora, Realm, Remember that, Goodbye, Hello, Second, Secondly, Shed light, Similarly, Solace, Starting a sentence with 'By', Switching gears, The ultimate guide, Third, This innovative solution, To say nothing of, Today’s digital world, Together with, Top-notch, Treasure box, Treasure trove, Uniquely, Unleash, Unlock, Various, We've got you covered, When it comes to, Whilst, Whimsical.'
  
//   // Make a request to the OpenAI API to generate a response
//   const response = await fetch('https://api.openai.com/v1/chat/completions', {
//     method: 'POST',
//     headers: {
//       'Authorization': `Bearer ${apiKey}`, // Add the API key for authentication
//       'Content-Type': 'application/json',  // Define the content type as JSON
//     },
  
//     body: JSON.stringify({
//       model: 'gpt-4o-mini',  // Use GPT-3.5 model for chat completions
//       messages: [{ role: 'user', content: req.params.query }],  // Pass user query
//     }),
//   });

//   // Check if the OpenAI API request was successful
//   if (!response.ok) {
//     throw new Error(`OpenAI API error: ${response.status} - ${response.statusText}`);
//   }

//   // Parse the response from OpenAI
//   const message = await response.json();
//   const aiGenResponse = message.choices[0].message.content;  // Extract AI-generated response

//   // Render the AI response on the page
//   res.render('index', {
//     query: req.params.query,
//     aiGenResponse: aiGenResponse,
//     page: 'aiGenResponse',
//   });
// });

const fetch = require('node-fetch'); // Ensure you have the fetch module installed or use native fetch in Node.js

exports.AiGenResults = asyncHandler(async (req, res) => {
  try {
    // Fetch the user's OpenAI API key from the database using the user ID from the request
    const user = await userModel.findById(req.user.id);
  
    // Extract the API key from the user data
    const apiKey = user ? user.openAiKey : null;
  
    // Check if the API key is missing or invalid
    if (!apiKey) {
      return res.status(400).send(`<script>alert('API Key is missing or invalid. Please check your settings.');window.close();</script>`);
    }

    // Extract the query from the request parameters or body (assumes query is passed in params or body)
    const query = req.params.query || req.body.query;

    // Validate if the query is provided
    if (!query) {
      return res.status(400).json({ error: "Query is missing. Please provide a valid query." });
    }

    // Prepare the prompt based on the instructions (you can adjust this structure based on your needs)
    const prompt = `Write the best possible answer for the query "${query}". This is the question from Google people also ask section. Ensure the text reads naturally and provides value to the reader. Make sure the answer to the given question provides the relevant answer in the first sentence. Make it easy to read, keep the vocabulary simple, and make it look like it's written by a human. Also, remove commonly used AI terms such as "As an AI", "In conclusion", etc.`;

    // Make a request to the OpenAI API to generate a response
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`, // Add the API key for authentication
        'Content-Type': 'application/json',  // Define the content type as JSON
      },
      body: JSON.stringify({
        model: 'gpt-4',  // Ensure you're using the correct model version
        messages: [{ role: 'user', content: prompt }],  // Pass the formatted query prompt
      }),
    });

    // Check if the OpenAI API request was successful
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status} - ${response.statusText}`);
    }

    // Parse the response from OpenAI
    const message = await response.json();
    const aiGenResponse = message.choices[0].message.content;  // Extract AI-generated response

    // Render the AI response on the page
    return res.render('index', {
      query: query,
      aiGenResponse: aiGenResponse,
      page: 'aiGenResponse',
    });
  } catch (error) {
    console.error('Error generating AI response:', error);
    return res.status(500).json({ error: 'Internal server error', details: error.message });
  }
});
