<!-- explore-plans.ejs -->
<% if (messages.error && messages.error.length > 0) { %>
  <script>
    alert("<%= messages.error[0] %>");
  </script>
<% } %>

<div class="content-wrapper">
  <div class="page-header">
    <h3 class="page-title"> Pricings & Plans Type </h3>
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Tables</a></li>
        <li class="breadcrumb-item active" aria-current="page">Basic tables</li>
      </ol>
    </nav>
  </div>
  <div class="row">

    <div class="col-lg-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Subscription Types Card</h4>
          <p class="card-description">
            For <code>@<%= auth.name %></code>
          </p>
          <div class="overflow-auto">
            <table class="table table-striped table-bordered">
              <thead>
                <tr class="table-danger">
                  <th>Plan Title</th>
                  <th>Plan Description</th>
                  <th>Price</th>
                  <th>Duration</th>
                  <th>Select Currency and Process Payment</th>
                </tr>
              </thead>
              <tbody>
                <% plans.forEach(function (plan) { %>
                  <tr>
                    <td><%= plan.title %></td>
                    <td><%= plan.description %></td>
                    <td>$ <%= plan.price %></td>
                    <td><%= plan.duration %></td>
                    <td>
                      <!-- Hidden inputs for payment -->
                      <input type="hidden" id="amount-<%= plan._id %>" value="<%= plan.price * 100 %>" required>
                      <input type="hidden" id="planId-<%= plan._id %>" value="<%= plan._id %>" required>

                      <select id="currency-<%= plan._id %>" class="js-example-basic-single">
                        <option value="USD">US Dollar (USD)</option>
                        <option value="EUR">Euro (EUR)</option>
                        <option value="INR">Indian Rupee (INR)</option>
                        <option value="JPY">Japanese Yen (JPY)</option>
                        <option value="GBP">British Pound (GBP)</option>
                        <option value="AUD">Australian Dollar (AUD)</option>
                        <option value="CAD">Canadian Dollar (CAD)</option>
                        <option value="CHF">Swiss Franc (CHF)</option>
                        <option value="CNY">Chinese Yuan (CNY)</option>
                        <option value="SEK">Swedish Krona (SEK)</option>
                        <option value="NZD">New Zealand Dollar (NZD)</option>
                      </select>

                      <!-- Payment button -->
                      <button type="button" onclick="payNow('<%= plan._id %>')" class="btn btn-sm btn-light">Pay Now</button>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  async function payNow(planId) {
    const amount = document.getElementById(`amount-${planId}`).value;
    const currency = document.getElementById(`currency-${planId}`).value;

    let exchangeRateResponse = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
    let exchangeRateData = await exchangeRateResponse.json();
    let currencyRate = exchangeRateData.rates[currency];

    const finalAmount = amount * currencyRate;

    // Create order by calling the server endpoint
    const response = await fetch('/create-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ amount: finalAmount, currency: currency, receipt: 'receipt#1', notes: {} })
    });

    const order = await response.json().catch(() => ({ message: 'Unexpected response from server.' }));

    if (!response.ok) {
      return alert(order.message || 'Error creating order. Please try again.');
    }

    // Open Razorpay Checkout
    const options = {
      key: 'rzp_test_exWBgUyrUlItcw', // Replace with your Razorpay key_id
      amount: order.amount,
      currency: order.currency,
      name: 'Acme Corp',
      description: 'Test Transaction',
      order_id: order.id,
      handler: async function (response) {
        const paymentDetails = {
          razorpay_order_id: response.razorpay_order_id,
          razorpay_payment_id: response.razorpay_payment_id,
          currency: response.currency,
          razorpay_signature: response.razorpay_signature,
          planId: planId
        };

        try {
          // Verify the payment by calling the server endpoint
          const verificationResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(paymentDetails)
          });

          const result = await verificationResponse.json();

          // Handle success or error
          if (verificationResponse.ok) {
            window.location.href = '/active-plan';
          } else {
            alert(result.error || 'Payment verification failed. Please try again.');
          }
        } catch (error) {
          console.error("Error during payment verification:", error);
          alert('An error occurred while verifying the payment. Please try again.');
        }
      },
      theme: {
        color: '#F37254'
      },
    };

    const rzp = new Razorpay(options);
    rzp.open();
  }
</script>
